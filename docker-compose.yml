services:
  # Banco de dados PostgreSQL
  db:
    image: postgres:17
    container_name: auth_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - data_sql:/var/lib/postgresql/data
    networks:
      - auth_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Aplicação Next.js
  nextjs:
    build:
      context: .
      dockerfile: Dockerfile.nextjs
    container_name: auth_nextjs
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=development
      - WATCHPACK_POLLING=1000
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - db
    networks:
      - auth_network
    volumes:
      - .:/app:ro  # Modo somente leitura para evitar escritas desnecessárias
      - node_modules:/app/node_modules  # Volume nomeado para persistência
      - next_cache:/app/.next  # Volume nomeado para o cache do Next.js
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 1G
    command: >
      sh -c "npm rebuild @tailwindcss/oxide --platform=linux --arch=x64 --libc=musl &&
             npx prisma generate &&
             npx prisma db push &&
             npm run dev"

  # Prisma Studio
  prisma:
    build:
      context: .
      dockerfile: Dockerfile.nextjs
    container_name: auth_prisma
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - db
    networks:
      - auth_network
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    command: >
      sh -c "npx prisma studio --port 5555 --hostname 0.0.0.0"

volumes:
  data_sql:
  node_modules:  # Declarado como volume nomeado
  next_cache:    # Declarado como volume nomeado

networks:
  auth_network:
    driver: bridge